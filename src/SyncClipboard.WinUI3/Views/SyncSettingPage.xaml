<?xml version="1.0" encoding="utf-8" ?>
<Page x:Class="SyncClipboard.WinUI3.Views.SyncSettingPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:ui="using:CommunityToolkit.WinUI.Controls"
      xmlns:i18n="using:SyncClipboard.Core.I18n"
      xmlns:vm="using:SyncClipboard.Core.ViewModels"
      xmlns:vc="using:SyncClipboard.WinUI3.ValueConverters"
      xmlns:models="using:SyncClipboard.Core.Models"
      xmlns:local="using:SyncClipboard.WinUI3.Views"
      MinWidth="550"
      d:DataContext="{d:DesignInstance vm:SyncSettingViewModel}"
      BorderBrush="Transparent"
      mc:Ignorable="d">
    <Page.Resources>
        <vc:BoolToPasswordIconConverter x:Key="BoolToPasswordIconConverter" />
        <vc:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" />
        <!--<Thickness x:Key="SettingsCardPadding">16,16,60,16</Thickness>
        <Thickness x:Key="SettingsExpanderItemPadding">58,8,60,8</Thickness>
        <Thickness x:Key="ClickableSettingsExpanderItemPadding">58,0,32,0</Thickness>
        <Thickness x:Key="SettingsExpanderItemBorderThickness">0,0,0,0</Thickness>-->
        <Style x:Key="IconButtonStyle" TargetType="Button" BasedOn="{StaticResource DateTimePickerFlyoutButtonStyle}">
            <Setter Property="Height" Value="32" />
            <Setter Property="Width" Value="32" />
            <Setter Property="Padding" Value="0,0,0,0" />
        </Style>
        <Style TargetType="ToggleButton" BasedOn="{StaticResource DefaultToggleButtonStyle}">
            <Setter Property="Height" Value="32" />
            <Setter Property="Width" Value="32" />
            <Setter Property="Padding" Value="0,0,0,0" />
            <Setter Property="BorderThickness" Value="0,0,0,0" />
            <Setter Property="Background" Value="Transparent" />
        </Style>
    </Page.Resources>
    <StackPanel Spacing="10">
        <ui:SettingsExpander Header="{x:Bind i18n:Strings.SyncAccount}" IsExpanded="True">
            <ui:SettingsExpander.HeaderIcon>
                <FontIcon Glyph="&#xE13D;" />
            </ui:SettingsExpander.HeaderIcon>
            <StackPanel>
                <ComboBox MinWidth="200"
                          ItemsSource="{x:Bind _viewModel.SavedAccounts, Mode=OneWay}"
                          SelectedItem="{x:Bind _viewModel.SelectedAccount, Mode=TwoWay}"
                          PlaceholderText="{x:Bind i18n:Strings.SelectAccount}"
                          Visibility="{x:Bind vc:ConvertMethod.BoolToVisibility(_viewModel.IsLoggedIn), Mode=OneWay}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate x:DataType="models:DisplayedAccountConfig">
                            <TextBlock Text="{x:Bind DisplayName}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <TextBlock Text="{x:Bind i18n:Strings.PleaseAddAccount}" Visibility="{x:Bind vc:ConvertMethod.BoolToVisibility(_viewModel.IsNotLoggedIn), Mode=OneWay}" />
            </StackPanel>
            <ui:SettingsExpander.Items>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.AddAccount}" IsClickEnabled="True" Command="{x:Bind _viewModel.AddAccountCommand}" />
                <ui:SettingsCard Header="{x:Bind i18n:Strings.EditAccountConfig}"
                                 IsClickEnabled="True"
                                 Command="{x:Bind _viewModel.EditAccountCommand}"
                                 Visibility="{x:Bind _viewModel.SelectedAccount, Mode=OneWay, Converter={StaticResource ObjectToVisibilityConverter}}">
                    <Button MinWidth="60" Content="{x:Bind i18n:Strings.DeleteAccount}" Command="{x:Bind _viewModel.RemoveAccountCommand}" />
                </ui:SettingsCard>
            </ui:SettingsExpander.Items>
        </ui:SettingsExpander>
        <ui:SettingsExpander Header="{x:Bind i18n:Strings.ClipboardSyncing}" IsExpanded="True">
            <ui:SettingsExpander.HeaderIcon>
                <FontIcon Glyph="&#xE117;" />
            </ui:SettingsExpander.HeaderIcon>
            <ToggleSwitch OnContent="{x:Bind i18n:Strings.On}" OffContent="{x:Bind i18n:Strings.Off}" IsOn="{x:Bind _viewModel.SyncEnable, Mode=TwoWay}" />
            <ui:SettingsExpander.Items>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.TrustInsecureCertificate}">
                    <ToggleSwitch OnContent="{x:Bind i18n:Strings.On}" OffContent="{x:Bind i18n:Strings.Off}" IsOn="{x:Bind _viewModel.TrustInsecureCertificate, Mode=TwoWay}" />
                </ui:SettingsCard>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.QueryInterval}">
                    <NumberBox Minimum="0" Maximum="100000" Value="{x:Bind _viewModel.IntervalTime, Mode=TwoWay}" />
                </ui:SettingsCard>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.RetryTimes}">
                    <NumberBox Minimum="0" Maximum="100000" Value="{x:Bind _viewModel.RetryTimes, Mode=TwoWay}" />
                </ui:SettingsCard>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.TimeoutPeriod}">
                    <NumberBox Minimum="0" Maximum="100000" Value="{x:Bind _viewModel.TimeOut, Mode=TwoWay}" />
                </ui:SettingsCard>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.SendNotificationAfterManuallyUpload}">
                    <ToggleSwitch OnContent="{x:Bind i18n:Strings.On}" OffContent="{x:Bind i18n:Strings.Off}" IsOn="{x:Bind _viewModel.NotifyOnManualUpload, Mode=TwoWay}" />
                </ui:SettingsCard>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.SendNotificationAfterUpdateLocalClipboard}">
                    <ToggleSwitch OnContent="{x:Bind i18n:Strings.On}" OffContent="{x:Bind i18n:Strings.Off}" IsOn="{x:Bind _viewModel.NotifyOnDownloaded, Mode=TwoWay}" />
                </ui:SettingsCard>
                <ui:SettingsCard Header="{x:Bind i18n:Strings.SyncContentControl}" IsClickEnabled="True" Command="{x:Bind _viewModel.OpenSyncContentControlPageCommand}" />
            </ui:SettingsExpander.Items>
        </ui:SettingsExpander>
    </StackPanel>
</Page>